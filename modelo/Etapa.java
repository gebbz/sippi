package modelo;

//

import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Proyecto2010_Requerimientos-iuga
//  @ File Name : Etapa.java
//  @ Date : 14/06/2010
//  @ Author : 
//
//




public class Etapa {
    private int id;

    // IUGA MOD
    private String nombre;

    private String duracion;
    private Date fechaInicio;
    private Date fechaFin;
    private String descripcion;
    private int nivelDeCriticidad;
    private List<Etapa> cpm;
    private String ubicacion;
    private RecursoEspecifico transportePasajeros;
    private RecursoEspecifico tranportMyH;
    private List<Tarea> tareas;

    
    public void crear() {

    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }


    public void mostrarEtapa() {

    }

    public void mostrarEmpleados() {

    }

    public void mostrarMateriales() {

    }

    public void mostrarEmpleadosDeEseTipoYMaximaFechaDeVencimiento() {

    }

    public void getEtapaPrimerNivel() {

    }

    public void buscarDatosDeEtapa() {

    }

    public void getActividad() {

    }

    public Etapa() {
        this.tareas = new ArrayList<Tarea>();
        this.cpm = new ArrayList<Etapa>();
    }

    public List<Etapa> getCpm() {
        return cpm;
    }

    public void setCpm(List<Etapa> cpm) {
        this.cpm = cpm;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public String getDuracion() {
        return duracion;
    }

    public void setDuracion(String duracion) {
        this.duracion = duracion;
    }

    public Date getFechaFin() {
        return fechaFin;
    }

    public void setFechaFin(Date fechaFin) {
        this.fechaFin = fechaFin;
    }

    public Date getFechaInicio() {
        return fechaInicio;
    }

    public void setFechaInicio(Date fechaIinicio) {
        this.fechaInicio = fechaIinicio;
    }

    public int getNivelDeCriticidad() {
        return nivelDeCriticidad;
    }

    public void setNivelDeCriticidad(int nivelDeCriticidad) {
        this.nivelDeCriticidad = nivelDeCriticidad;
    }

    public String getUbicacion() {
        return ubicacion;
    }

    public void setUbicacion(String ubicacion) {
        this.ubicacion = ubicacion;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public RecursoEspecifico getTranportMyH() {
        return tranportMyH;
    }

    public void setTranportMyH(RecursoEspecifico tranportMyH) {
        this.tranportMyH = tranportMyH;
    }

    public RecursoEspecifico getTransportePasajeros() {
        return transportePasajeros;
    }

    public void setTransportePasajeros(RecursoEspecifico transportePasajeros) {
        this.transportePasajeros = transportePasajeros;
    }

    public List<Tarea> getTareas() {
        return tareas;
    }

    public void setTareas(List<Tarea> tareas) {
        this.tareas = tareas;
    }


    public double calcularSubTotalMateriales()
    {
        HashMap<Integer,DetalleMaterial> subtotales = new HashMap<Integer, DetalleMaterial>();
        Iterator<Tarea> itTarea = this.tareas.iterator();
        while(itTarea.hasNext()){
            Tarea t = itTarea.next();
            Iterator<DetalleMaterial> itDM = t.getDetallesMaterial().iterator();
            while(itDM.hasNext()){
                DetalleMaterial dm = itDM.next();
                subtotales.put(dm.getId(), dm);
            }
        }
        double totalMateriales=0;
        Iterator itSubs = subtotales.entrySet().iterator();
        while(itSubs.hasNext()){
            DetalleMaterial dm = (DetalleMaterial)((Map.Entry)itSubs.next()).getValue();
            Iterator<PrecioSegunCantidad> itPrecios = dm.getMaterial().getListaUltimosPrecios().iterator();
            double precio=0;
            while(itPrecios.hasNext()){
                PrecioSegunCantidad psc = itPrecios.next();
                if(dm.getCantidad()>= psc.getCantidad()){
                    precio=psc.getPrecio();
                }
            }
            totalMateriales+=(precio*dm.getCantidad());
        }
        return totalMateriales;
    }

    public double calcularSubTotalTranporteMateriales()
    {
        return 10;
    }

    public double calcularSubTotalTrasladoPersonas()
    {
        return 10;
    }

    public double calcularSubTotalHsHombre()
    {
        return 10;
    }

    public double calcularSubTotalAlojamiento()
    {
        return 10;
    }

    public double calcularSubTotal()
    {
        return calcularSubTotalAlojamiento()+
               calcularSubTotalHsHombre()+
               calcularSubTotalMateriales()+
               calcularSubTotalTranporteMateriales()+
               calcularSubTotalTrasladoPersonas();
    }
}
