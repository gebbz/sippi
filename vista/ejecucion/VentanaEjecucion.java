package vista.ejecucion;

import controlador.ejecucion.GestorEjecucion;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import modelo.TareaEjecucion;
import util.SwingPanel;
import util.Tupla;
import vista.ejecucion.lanzamiento.VentanaLanzamiento;
import vista.planificacion.ArbolTareasGestor;
import vista.planificacion.PantallaEditarTarea;
import vista.planificacion.arbolTareas.ArbolIconoNodo;
import vista.planificacion.arbolTareas.ArbolIconoRenderer;

/**
 * Ventana Principal de Ejecucion !!
 * @author Iuga
 */
public class VentanaEjecucion extends javax.swing.JInternalFrame {

    private static final int OPTN_DATOS_GENERALES    = 0;
    private static final int OPTN_RRHH               = 1;
    private static final int OPTN_HERRAMIENTAS       = 2;
    private static final int OPTN_MATERIALES         = 3;
    private static final int OPTN_ALQUILERES_COMPRAS = 4;
    private static final int OPTN_ADICIONALES        = 5;
    private PanelDatosGeneralesDeTarea panelDatosTarea;
    private PanelHerramientas panelHerramientas;
    private PanelMateriales   panelMateriales;
    private PanelAlquileresCompras panelAlquileresCompras;
    private PanelRecursosHumanos panelRecursosHumanos;
    private PanelAdicionales panelAdicionales;
    
    private GestorEjecucion gestor;
    
    ArbolTareasGestor arbolTareasGestor;
    private HashMap<Integer,PantallaEditarTarea> ventanasEditarTareasAbiertas;
    
    private ArbolIconoNodo nodoActualArbolTareas;
    private int idUltimoNodoArbolTareas=0;
    private TareaEjecucion tareaSeleccionada;
    private String nombreTipoRecursoEnPanel;
    
    
    /**
     * Ventana Principal de Ejecucion !!
     */
    public VentanaEjecucion(int idObra) {
        // Inicializo Ventana
        initComponents();
        // Inicializo el Gestor de a Ejecucion
        this.gestor = new GestorEjecucion(this,idObra);
        // Verifico si la obra esta en ejecucion
        checkSiObraTieneEjecución(idObra);
        // Segun el estado de la ejecucion, cambio el comportamiento
        cambiarSegunEstadoEjecucion();
        cargarComboTipoRecurso();
        arbolTareasGestor=new ArbolTareasGestor(arbolTareas);
        inicializarArbolDeTareas();
        inicializarEventosArbol();
        
        
    }
    
    private void cargarComboTipoRecurso()
    {
       Tupla tuplaDatos=new Tupla(OPTN_DATOS_GENERALES, "Datos generales");
       Tupla tuplaRRHH=new Tupla(OPTN_RRHH, "Recursos Humanos");
       Tupla tuplaHerramientas=new Tupla(OPTN_HERRAMIENTAS, "Herramientas");
       Tupla tuplaMateriales=new Tupla(OPTN_MATERIALES, "Materiales");
       Tupla tuplaAlquileresCompras=new Tupla(OPTN_ALQUILERES_COMPRAS, "Alquileres/Compras");
       Tupla tuplaAdicionales=new Tupla(OPTN_ADICIONALES, "Adicionales");
       DefaultTableModel modeloTablaMenu=(DefaultTableModel)tblRecursos.getModel();
       modeloTablaMenu.setRowCount(0);
       modeloTablaMenu.setColumnCount(0);
       Tupla[] valores=new Tupla[6];
       valores[0]=tuplaDatos;
       valores[1]=tuplaRRHH;
       valores[2]=tuplaHerramientas;
       valores[3]=tuplaMateriales;
       valores[4]=tuplaAlquileresCompras;
       valores[5]=tuplaAdicionales;
       modeloTablaMenu.addColumn("Menu", valores);
       
       
       tblRecursos.setModel(modeloTablaMenu);
       
       mostrarPanelCargaDeDatos(tuplaDatos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEmitirInformes = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        arbolTareas = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRecursos = new javax.swing.JTable();
        panelCentral = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnLanzamiento = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Editar Ejecución");

        btnEmitirInformes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/List.png"))); // NOI18N
        btnEmitirInformes.setText("Emitir Informes");

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/block.png"))); // NOI18N
        btnCerrar.setText("Cancelar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/save_upload.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        arbolTareas.setModel(null);
        arbolTareas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane5.setViewportView(arbolTareas);

        tblRecursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRecursos.setColumnSelectionAllowed(false);
        tblRecursos.setIntercellSpacing(new java.awt.Dimension(10, 5));
        tblRecursos.setMaximumSize(new java.awt.Dimension(300, 300));
        tblRecursos.setRowHeight(25);
        tblRecursos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRecursos.setTableHeader(null);
        tblRecursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblRecursosMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblRecursos);

        panelCentral.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles"));
        panelCentral.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCentral, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
            .addComponent(panelCentral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gestion de Tareas", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 965, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Línea de Tiempo", jPanel1);

        jPanel2.setToolTipText("Datos Generales");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 965, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Datos Generales", jPanel2);

        jPanel3.setToolTipText("Observaciones");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("A continuación escriba todas la observaciones que crea necesarias:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 945, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Observaciones", jPanel3);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Ayuda sobre la utilización de esta ventana:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 945, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(497, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("<HTML><span color='002EB8'><b>Ayuda?</b></span>", jPanel4);

        btnLanzamiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/accept_page.png"))); // NOI18N
        btnLanzamiento.setText("Lanzamiento");
        btnLanzamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLanzamientoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEmitirInformes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLanzamiento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar)
                .addContainerGap())
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEmitirInformes)
                    .addComponent(btnCerrar)
                    .addComponent(btnGuardar)
                    .addComponent(btnLanzamiento))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // llamo al comportamiento Cancelar de la ventana 
        cancelar();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Llamo al guardar
        guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLanzamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLanzamientoActionPerformed
        VentanaLanzamiento win = new VentanaLanzamiento(gestor.getIdObraActual());
        SwingPanel.getInstance().addWindow(win);
        win.setVisible(true);
    }//GEN-LAST:event_btnLanzamientoActionPerformed

    private void tblRecursosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRecursosMousePressed
        mostrarPanelCargaDeDatos(((Tupla)tblRecursos.getModel().getValueAt(tblRecursos.getSelectedRow(), 0)));
    }//GEN-LAST:event_tblRecursosMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolTareas;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEmitirInformes;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLanzamiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JTable tblRecursos;
    // End of variables declaration//GEN-END:variables

    /**
     * Verifica si la obra tiene ejecucion,si no la tiene esta ventana
     * debería advertirlo y cerrarse.
     * @param idObra 
     */
    private void checkSiObraTieneEjecución(int idObra) {
        
    }
    
    /**
     * Segun el estado de la ejecucion, cambio el comportamiento.
     * Si está en alta, o en definicion, dejo todo editable
     * Si esta en baja o cancelada, no dejo editar nada.
     */
    private void cambiarSegunEstadoEjecucion() {

    }
    
    /**
     * Cancela los cambios y cierra la ventana.
     * Antes pregunta si desea guardar los cambios.
     */
    private void cancelar() {
        int seleccion = JOptionPane.showOptionDialog(
                this, // Componente padre
                "<HTML>Si <b>cancela</b> todos los cambios realizados se <b><span color='#FF0000'>pederán</span></b> \n"
                + "¿Desea guardar los cambios antes de cerrar?", //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"Guardar y Cerrar","Cerrar", "Cancelar"}, // null para YES, NO y CANCEL
                "Guardar y Cerrar");
        
        if (seleccion != -1) {
            switch(seleccion+1){
                case 1:
                    // PRESIONO Guardar y Cerrar
                    System.out.println("Guardar y Cerrar:"+(seleccion+1));
                    if(guardar()){
                        this.dispose();
                    }
                    break;
                case 2:
                    // PRESIONO Cerrar
                    System.out.println("Cerrar:"+(seleccion+1));
                    this.dispose();
                    break;
                case 3:
                default:
                    System.out.println("Cancelar:"+(seleccion+1));
                    // Cancelar - Nadaremos
                    break;
            }
        }
    }
    
    /**
     * Metodo a llamar cuando se quieren guardar los cambios !!
     * @return 
     */
    private boolean guardar() {
        return true;
    }    
    
    
    private void mostrarPanelCargaDeDatos(Tupla tipoRecurso)
    {
        int idTipoRecurso=tipoRecurso.getId();
        JPanel contenido=null;
        switch(idTipoRecurso)
        {
            case OPTN_DATOS_GENERALES:
                if(this.panelDatosTarea==null){
                    this.panelDatosTarea =  new PanelDatosGeneralesDeTarea(this.gestor);
                }
                this.panelDatosTarea.actualizar();
                contenido=panelDatosTarea;
                break;
            
            case OPTN_RRHH:
                if(this.panelRecursosHumanos==null){
                    this.panelRecursosHumanos =  new PanelRecursosHumanos(this.gestor);
                }
                this.panelRecursosHumanos.actualizar();
                contenido=panelRecursosHumanos;
                break;
            case OPTN_HERRAMIENTAS:
                if(this.panelHerramientas==null){
                    this.panelHerramientas =  new PanelHerramientas(this.gestor);
                }
                this.panelHerramientas.actualizar();
                contenido=panelHerramientas;
                break;                
            case OPTN_MATERIALES:
                if(this.panelMateriales==null){
                    this.panelMateriales =  new PanelMateriales(this.gestor);
                }
                this.panelMateriales.actualizar();
                contenido=panelMateriales;
                break;
            case OPTN_ALQUILERES_COMPRAS:
                if(this.panelAlquileresCompras==null){
                    this.panelAlquileresCompras =  new PanelAlquileresCompras(this.gestor);
                }
                this.panelAlquileresCompras.actualizar();
                contenido=panelAlquileresCompras;
                break;
            case OPTN_ADICIONALES:
                if(this.panelAdicionales==null){
                    this.panelAdicionales =  new PanelAdicionales(this.gestor);
                }
                this.panelAdicionales.actualizar(); 
                contenido=panelAdicionales;
                break;
        }
        nombreTipoRecursoEnPanel=tipoRecurso.toString();
        setearPanelCentral(contenido);
        
        
    }
    protected void setearPanelCentral(JPanel panel){
        setearNombrePanelCentral();
         panelCentral.removeAll();
        // panelCentral.setViewportView(panel);
         panelCentral.add(panel, BorderLayout.CENTER);
         panel.setVisible(true);  
         this.updateUI();
    }  
    
    private void setearNombrePanelCentral()
    {
        String nombreCompletoPanel=nombreTipoRecursoEnPanel.toString();
        if(tareaSeleccionada!=null){
        nombreCompletoPanel=nombreCompletoPanel + " - Tarea "+tareaSeleccionada.getNombre();
        }
         panelCentral.setBorder(javax.swing.BorderFactory.createTitledBorder(nombreCompletoPanel));
    }
    
    private void inicializarArbolDeTareas()
    {
        DefaultTreeModel modelo=gestor.cargarModeloArbolTareas();
        arbolTareas.setModel(modelo);
        arbolTareas.setCellRenderer(new ArbolIconoRenderer());
        //inicializarEventosArbol();
        arbolTareas.repaint();  
        
        if(idUltimoNodoArbolTareas!=0)
        {
            ArbolIconoNodo ultimoNodoArbolTareas=arbolTareasGestor.getNodoArbolTareasPorId(arbolTareas,idUltimoNodoArbolTareas);
            /*if( ArbolDeTareasTipos.esGruposRecursos(tipoUltimoNodoArbolTareas))
            {
              ultimoNodoArbolTareas=arbolTareasGestor.obtenerNodoGrupoDeTarea( ultimoNodoArbolTareas, tipoUltimoNodoArbolTareas);  
            }*/
            TreePath tpt=new TreePath(ultimoNodoArbolTareas.getPath());
            arbolTareas.expandPath(tpt);
            idUltimoNodoArbolTareas=0;
        }
    }
    
    private void inicializarEventosArbol()
    {
       //Listener del arbol
        arbolTareas.addMouseListener(new MouseAdapter() {
                
            private void clickEnArbol(MouseEvent mouseEvent) {
              TreePath tp = arbolTareas.getPathForLocation(mouseEvent.getX(), mouseEvent.getY());
                if(tp==null)
                   {
                     mouseEvent.consume();
                     idUltimoNodoArbolTareas=0;
                     return;
                   }
                final ArbolIconoNodo nodo  = ArbolTareasGestor.getNodoDeTreeNodePath(tp);
                if(nodo==null)
                { 
                    idUltimoNodoArbolTareas=0;
                    return;
                }
                
                idUltimoNodoArbolTareas=nodo.getId();
                
                  
            
                tareaSeleccionada = setearTareaEjecucionSeleccionada(idUltimoNodoArbolTareas );
                mouseEvent.consume();
            }
 
            @Override
        public void mousePressed(MouseEvent e)  { clickEnArbol(e); }
            @Override
        public void mouseReleased(MouseEvent e) { clickEnArbol(e); }
            @Override
        public void mouseClicked(MouseEvent e)  { clickEnArbol(e); }
            });
        
        
    }
    
    private TareaEjecucion setearTareaEjecucionSeleccionada(int hash)    {
        TareaEjecucion tarea= gestor.setearTareaEjecucionSeleccionada(hash);
        actualizarPaneles();
        
        return tarea;
    }
    
    
    
    /**
     * Muestra un mensaje
     * @param tipo
     * @param titulo
     * @param mensaje 
     */
    public void mostrarMensaje(int tipo,String titulo,String mensaje)
    {
         JOptionPane.showMessageDialog(this.getParent(),mensaje,titulo,tipo);
    } 
    
    public void actualizarPaneles(){
    
        if(this.panelDatosTarea!=null)
        {this.panelDatosTarea.actualizar();}
        if(this.panelRecursosHumanos!=null)
        {this.panelRecursosHumanos.actualizar();}
        if(this.panelHerramientas!=null)
        {this.panelHerramientas.actualizar();}
        if(this.panelMateriales!=null)
        {this.panelMateriales.actualizar();}
        if(this.panelAlquileresCompras!=null)
        {this.panelAlquileresCompras.actualizar();}
        if(this.panelAdicionales!=null)
        {this.panelAdicionales.actualizar();}
        
        setearNombrePanelCentral();
    }
            
}
