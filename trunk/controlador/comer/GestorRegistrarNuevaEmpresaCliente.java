package controlador.comer;

import controlador.utiles.gestorGeoLocalicacion;
import java.util.ArrayList;
//import java.util.List;
import java.util.Iterator;
import javax.transaction.Transaction;
import modelo.*;
import modelo.Pais;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import util.Tupla;
import util.HibernateUtil;
import util.SwingPanel;
import vista.comer.pantallaRegistrarEmpresaCliente;
import vista.comer.pantallaRegistrarNuevaPlanta;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Proyecto2010_Requerimientos-iuga
//  @ File Name : GestorRegistrarNuevaEmpresaCliente.java
//  @ Date : 14/06/2010
//  @ Author : 
//
//




public class GestorRegistrarNuevaEmpresaCliente {
    private ArrayList<Pais> paises;
    private ArrayList<Provincia> provincias;
    private ArrayList<Localidad> localidades;
    private ArrayList<Barrio> barrios;
    private Pais pais;
    private Provincia provincia;
    private Localidad localidad;
    private Barrio barrio;
    private String cuit;
    private String email;
    private ArrayList<Telefono> telefonos;
    private ArrayList<Domicilio> domicilio;
    private pantallaRegistrarEmpresaCliente pantalla;

    public GestorRegistrarNuevaEmpresaCliente(pantallaRegistrarEmpresaCliente pantalla) {
        this.pantalla = pantalla;
    }

    public void registrarNuevaPlanta(String razonSocial)
    {
        pantallaRegistrarNuevaPlanta np = new pantallaRegistrarNuevaPlanta(this,razonSocial);
        SwingPanel.getInstance().addWindow(np);
        np.setVisible(true);
    }

    public void setNuevaPlanta(int id)
    {
        // SI ESTE METODO SE ACTIVA SIGNIFICA QUE AGREGO UNA NUEVA PLANTA CON EXITO
        // Y EL ID es el id pasado por parametro
        pantalla.plantaAgregada();
        //TODO: UNA VEZ QUE YA REGISTRASTE LA NUEVA EMPRESA, TENES QUE BUSCAR LA PLANTA CREADA
        // Y  ACTUALIZARLE EL ID DE LA EMPRESA que va a estar en NULL... SI O SI !!!
        //(Usa el id este para encontrarla y actualizarla)
    }

    public void finCU() {

    }

    public void llamarCURegistrarNuevaPlanta() {

    }

    public void seleccionPais() {

    }

    public void seleccionProvincia() {

    }

    public void seleccionLocalidad() {

    }

    public void seleccionBarrio() {

    }

    public void nombreEmpresa() {

    }

    public void CUIT() {

    }

    public void datosDomicilio() {

    }

    public void EMail() {

    }

    public void telefono() {

    }

    public void seleccionTipoTelefono() {

    }

    public void agregarNuevaPlanta() {

    }

    public void confirmacionRegistro() {

    }

    public ArrayList<Tupla> mostrarTiposTelefono() {
        ArrayList<Tupla> tuplas = new ArrayList<Tupla>();
        Tupla tupla = null;
        try{
            SessionFactory sf = HibernateUtil.getSessionFactory();
            Session sesion = sf.openSession();
            Iterator iter = sesion.createQuery("from TipoTelefono q order by q.nombre").iterate();
            while ( iter.hasNext() ) {
                TipoTelefono tipo = (TipoTelefono) iter.next();
                tupla = new Tupla(tipo.getId(),tipo.getNombre());
                tuplas.add(tupla);
            }
        }catch(Exception e)
        {
            System.out.println("ERROR:"+e.getMessage()+"|");
            e.printStackTrace();
        }
        return tuplas;
    }

    public void registrarNuevaEmpresa() {

    }
    
    /**
     * IUGA
     * @return
     */
    public ArrayList<Tupla> mostrarNombrePaises() {

<<<<<<< .mine
    public ArrayList<Tupla> mostrarPaises() {

       gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
       return ggl.getPaises();

=======
            gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getPaises();
    }

    /**
     * IUGA
     * @return
     */
    public ArrayList<Tupla> mostrarLocalidades(Tupla prov) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getLocalidades(prov.getId());
>>>>>>> .r121
    }

<<<<<<< .mine
    public void paisPlanta() {

=======
    /**
     * IUGA
     * @return
     */
    public ArrayList<Tupla> mostrarProvincias(Tupla pais) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getProvincias(pais.getId());
>>>>>>> .r121
    }

<<<<<<< .mine
    public ArrayList<Tupla> mostrarProvincias(int idPais)
    {
       gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
       return ggl.getProvincias(idPais);
=======
    /**
     * IUGA
     * @return
     */
    public ArrayList<Tupla> mostrarBarrios(Tupla loc) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getBarrios(loc.getId());

>>>>>>> .r121
    }

    public ArrayList<Tupla> mostrarLocalidades(int idProvincia) {

       gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
       return ggl.getLocalidades(idProvincia);

    }

    public ArrayList<Tupla> mostrarBarrios(int idLocalidad) {

       gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
       return ggl.getBarrios(idLocalidad);

    }
}
