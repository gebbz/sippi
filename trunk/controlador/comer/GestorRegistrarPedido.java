package controlador.comer;

//

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import modelo.EmpresaCliente;
import modelo.PedidoObra;
import modelo.Planta;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.collection.PersistentList;
import util.HibernateUtil;
import util.SwingPanel;
import util.Tupla;
import vista.comer.pantallaRegistrarEmpresaCliente;
import vista.comer.pantallaRegistrarPedido;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Proyecto2010_Requerimientos-iuga
//  @ File Name : GestorRegistrarPedido.java
//  @ Date : 14/06/2010
//  @ Author : Iuga
//
//




public class GestorRegistrarPedido {

        private pantallaRegistrarPedido pantalla;

        private String nombre;
        private String descripcion;
        private EmpresaCliente empresa;
	private Planta planta;
	private Date fechaInicio;
	private Date fechaFin;
        private Date fechaAceptacion;
        private Date fechaRegistro;
	private double montoMaximo;
	private Date fechaLEP;
	private Date fechaLVP;
	private String pliegoObra;
	private String planosObra;

        public GestorRegistrarPedido(pantallaRegistrarPedido pantalla)
        {
            this.pantalla = pantalla;
        }
        
	public void registrarPedido()
        {
            
	}

        /**
         * Tomo el nombre  de la obra
         * @param nombre
         * @param descripcion
         */
	public void nombreObra(String nombre)
        {
            this.nombre = nombre;
	}

        /**
         * Tomo la descripcion de la obra
         * @param descripcion
         */
        public void descripcionObra(String descripcion)
        {
            this.descripcion = descripcion;
        }
	
	public void seleccionEmpresaCliente() {
	
	}
	
	public void buscarPlantas() {
	
	}
	
	public void mostrarPlantasEmpresaSeleccionada() {
	
	}
	
	public void seleccionPlanta() {
	
	}


	public void fechaInicioYFin(Date fechaInicio, Date fechaFin)
        {
            this.fechaInicio = fechaInicio;
            this.fechaFin = fechaFin;
	}

        /**
         * Seteo el monto maximo de la obra
         * @param monto
         */
	public void montoMaximo(double monto)
        {
            this.montoMaximo = monto;
	}
	
	public void fechaLEP(Date fechaLEP) {

            this.fechaLEP = fechaLEP;
	
	}
	
	public void fechaLVP(Date fechaLVP) {

            this.fechaLVP = fechaLVP;
	
	}
	
	public void pliegoObra(String pliego) {

            this.pliegoObra = pliego;
	
	}
	
	public void planosObra(String planos) {

            this.planosObra = planos;
	
	}

        /**
         * Toma la confirmacion del registro y empieza con el kilombo para
         * agregar un nuevo pedido
         */
	public void confirmacionRegistro() {

            crearPedidoObra();

	}
	
	private void crearPedidoObra() {

            PedidoObra nuevo = new PedidoObra();
            nuevo.setNombre(nombre);
            nuevo.setDescripcion(descripcion);
            nuevo.setFechaAceptacion(new Date());
            nuevo.setFechaDeRegistro(new Date());
            nuevo.setFechaFin(fechaFin);
            nuevo.setFechaInicio(fechaInicio);
            nuevo.setFechaLimiteEntregaPresupuesto(fechaLEP);
            nuevo.setFechaLimiteValidezPresupuesto(fechaLVP);
            nuevo.setMonto(montoMaximo);
            nuevo.setPlanos(planosObra);
            nuevo.setPliego(pliegoObra);

            generarNumeroPedido();           // AL PEDO
            buscarUltimoNumeroPedidoObra();  // AL PEDO

            nuevo.crear();

            try{
            SessionFactory sf = HibernateUtil.getSessionFactory();
            Session sesion = sf.openSession();
            sesion.beginTransaction();
            sesion.save(nuevo);
            sesion.getTransaction().commit();
            }catch(Exception e)
            {
                System.out.println("ERROR:"+e.getMessage()+"|");
                e.printStackTrace();
            }
	}

        private void crearPlanificacion()
        {

        }

	private void generarNumeroPedido() {

            // Deberia buscarlo, pero hibernate se encarga solo de ésto y
            // es transparente a nosotros =)

	}
	
	private void buscarUltimoNumeroPedidoObra() {

            // Deberia buscarlo, pero hibernate se encarga solo de ésto y
            // es transparente a nosotros =)

	}
	
	public void finCU() {
	
	}

    public void llamarCURegistrarNuevaEmpresaCliente() {
        pantallaRegistrarEmpresaCliente np = new pantallaRegistrarEmpresaCliente(this);
        SwingPanel.getInstance().addWindow(np);
        np.setVisible(true);
    }

    public void recargarComboBox() {
        this.pantalla.mostrarEmpresasCliente();
    }

    public ArrayList<Tupla> mostrarEmpresasCliente()
    {
        ArrayList<Tupla> tuplas = new ArrayList<Tupla>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session sesion = sf.openSession();

        sesion.beginTransaction();
        Iterator iter = sesion.createQuery("from EmpresaCliente ec order by ec.razonSocial").iterate();
        while ( iter.hasNext() )
        {
            EmpresaCliente ec = (EmpresaCliente)iter.next();
            Tupla tupla = new Tupla(ec.getId(),ec.getRazonSocial());
            tuplas.add(tupla);
        }
        return tuplas;
    }

    public ArrayList<Tupla> mostrarPlantasEmpresaCliente(int id) {
        ArrayList<Tupla> tuplas = new ArrayList<Tupla>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session sesion = sf.openSession();

        sesion.beginTransaction();
        EmpresaCliente ec = (EmpresaCliente)sesion.load(EmpresaCliente.class, id);
        //ArrayList<Planta> plantas = (ArrayList<Planta>)ec.getPlantas();
        PersistentList plantas = (PersistentList) ec.getPlantas();
        Iterator iter = plantas.iterator();
        while ( iter.hasNext() )
        {
            Planta pl = (Planta)iter.next();
            Tupla tupla = new Tupla(pl.getId(),pl.getRazonSocial());
            tuplas.add(tupla);
        }
        return tuplas;
    }
}