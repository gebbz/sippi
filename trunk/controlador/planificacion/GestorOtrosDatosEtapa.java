/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package controlador.planificacion;


import java.util.ArrayList;
import modelo.Domicilio;

import modelo.Barrio;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import util.HibernateUtil;
import vista.planificacion.pantallaRegistrarEtapa;
import controlador.utiles.gestorGeoLocalicacion;
import controlador.utiles.gestorBDvarios;
import util.Tupla;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
//import java.util.Set;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : MetAR
//  @ File Name : GestorOtrosDatosEtapa.java
//  @ Date : 11/10/2010
//  @ Author : Fran
//
//




public class GestorOtrosDatosEtapa   {

        private pantallaRegistrarEtapa pantalla;
	private Domicilio domicilioOrigenTransporteMH;
	private Domicilio domicilioDestinoTransporteMH;
        private String calleD;
        private int nmroD;
        private int pisoD;
        private String departamentoD;
        private String codigoPostalD;
        private Barrio barrioD;
        //private HashSet<String> HlistaNroTel;
        //private HashSet<TipoTelefono> HlistaTipoTel;


    public GestorOtrosDatosEtapa(pantallaRegistrarEtapa pantalla)
    {
        this.pantalla = pantalla;
        /*listaTipoEspecialidades= new ArrayList<TipoEspecialidad>();
        listaRangoEspecialidades= new ArrayList<RangoEspecialidad>();
        listaNroTel= new  ArrayList<String>();
        listaTipoTel= new ArrayList<TipoTelefono>();
        listaTipoCapacitaciones=new ArrayList<TipoCapacitacion>();
         listaVencimientoCapacitaciones=new ArrayList<Date>();*/
    }



	/*public void datosPersonalesEmpleado(int leg,String cuil, String nmroDoc, Tupla tipoDocumento, String nombre, String apellido, Date fechaNac,Date fechaIng, String email)
        {
            legajoEmpleado=leg;
            nroDocumento=nmroDoc;
            gestorBDvarios bdv = new gestorBDvarios();
            tipoDocumentoEmpleado=bdv.getTipoDeDocumento(tipoDocumento.getId());
            nombreEmpleado=nombre;
            apellidoEmpleado=apellido;
            emailEmpleado=email;
            fechaNacimientoEmpleado=fechaNac;
            cuilEmpleado=cuil;
            fechaIngresoEmpleado=fechaIng;

	}*/

	/*public void datosDomicilioEmpleado(String calle, String nro, String depto, String piso, String cp, Tupla tBarrio)
        {
            gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
            if(tBarrio.getId()>=0)
            {barrioD =ggl.getBarrio(tBarrio.getId());}
            else
            {barrioD=null;}
            if(nro.equals(""))
            {nmroD=0;}
            else{
            nmroD=Integer.parseInt(nro);}
            if(nro.equals(""))
            {pisoD=0;}
            else{
            pisoD =Integer.parseInt(piso);}
            calleD=calle;
            departamentoD=depto;
            codigoPostalD=cp;

	}*/


	public ArrayList<Tupla> mostrarPaises() {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getPaises();

	}


	public ArrayList<Tupla> mostrarProvincias(int idPais)
        {
           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getProvincias(idPais);
	}

        public ArrayList<Tupla> mostrarLocalidades(int idProvincia) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getLocalidades(idProvincia);

	}

	public ArrayList<Tupla> mostrarBarrios(int idLocalidad) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getBarrios(idLocalidad);

	}

        public ArrayList<Tupla> mostrarHerramientasDisponibles()
        {}

        public ArrayList<Tupla> mostrarEmpresasTransporteMH()
        {}

        public ArrayList<Tupla> mostrarEmpresasTransportePasajeros()
        {}

        public ArrayList<Tupla> mostrarEmpresasAlojamiento()
        {}

	/*public boolean empleadoConfirmado()
        {
            Empleado empleado;
            try{
            empleado=crearEmpleado();}
            catch (Exception ex)
            {
                System.out.println("No se pudo crear el empleado");
                return false;
            }
            Session sesion;
            ///////////////////////////////////
             try {
                    sesion = HibernateUtil.getSession();
                     //SessionFactory sf = HibernateUtil.getSessionFactory();
                    //sesion = sf.openSession();
                    try{
                    HibernateUtil.beginTransaction();
                    //sesion.beginTransaction();

                    Iterator itt=empleado.getTelefonos().iterator();
                    while(itt.hasNext())
                    {
                        Telefono tel=(Telefono)itt.next();
                        sesion.save(tel);
                    }
                    Iterator itEsp=empleado.getEspecialidades().iterator();
                    while(itEsp.hasNext())
                    {
                        Especialidad esp=(Especialidad)itEsp.next();
                        sesion.save(esp);
                    }
                   // Set CaPP=empleado.getCapacitaciones();

                   // Iterator itCap=CaPP.iterator();
                   Iterator itCap=empleado.getCapacitaciones().iterator();
                    while(itCap.hasNext())
                    {
                        Capacitacion cap=(Capacitacion)itCap.next();
                        sesion.save(cap);
                    }
                    if(empleado.getDomicilio()!=null)
                    {sesion.save(empleado.getDomicilio());}
                    sesion.save(empleado);


                     //sesion.getTransaction().commit();
                   HibernateUtil.commitTransaction();

                    return true;
                    }catch(Exception e) {
                        System.out.println("No se pudo realizar la transaccion\n"+e.getMessage());
                        HibernateUtil.rollbackTransaction();

                        return false;
                }
            } catch (Exception ex)
            {
                System.out.println("No se pudo abrir la sesion");
                return false;
            }

	}

	public int generarLegajoEmpleado()
        {
            int mayorLegajo;
            Session sesion;
            try{
             //SessionFactory sf = HibernateUtil.getSessionFactory();
            //Session sesion = sf.openSession();
            sesion = HibernateUtil.getSession();


            //sesion.beginTransaction();

            //try{

            Object ob =sesion.createQuery("Select MAX(legajo) from Empleado").uniqueResult();
            if(ob!=null)
            {mayorLegajo=(Integer)ob;}
            else{mayorLegajo=0;}
            //sesion.getTransaction().commit();
            //}
            }
            catch (Exception ex)
            {
                System.out.println("No se pudo abrir la sesion");
                mayorLegajo=0;
            }

            return (mayorLegajo+1);

	}*/


	/*public void vaciarDatos()
        {
        calleD=null;
        nmroD=0;
        pisoD=0;
        departamentoD=null;
        codigoPostalD=null;
        barrioD=null;
        }*/
	/*public Empleado crearEmpleado()
        {

            Date fechaAltaActual=new Date();
           // fecha_Alta=System

            Empleado emp=new Empleado(legajoEmpleado,nombreEmpleado, apellidoEmpleado,fechaNacimientoEmpleado,fechaIngresoEmpleado, tipoDocumentoEmpleado ,nroDocumento, cuilEmpleado,  emailEmpleado,  calleD,  nmroD,  pisoD,  departamentoD,  codigoPostalD,  barrioD , listaTipoEspecialidades, listaRangoEspecialidades ,listaNroTel, listaTipoTel, listaTipoCapacitaciones, listaVencimientoCapacitaciones, fechaAltaActual);
            //Empleado emp=new Empleado(legajoEmpleado,nombreEmpleado, apellidoEmpleado,fechaNacimientoEmpleado, tipoDocumentoEmpleado ,nroDocumento, cuilEmpleado,  emailEmpleado,  calleD,  nmroD,  pisoD,  departamentoD,  codigoPostalD,  barrioD , listaTipoEspecialidades, listaRangoEspecialidades ,HlistaNroTel, HlistaTipoTel, fechaAltaActual);

            return emp;

	}*/

	public void finCU() {

	}
	

}
