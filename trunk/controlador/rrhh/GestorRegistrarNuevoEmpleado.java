package controlador.rrhh;

//

import java.util.ArrayList;
import java.util.List;
import modelo.TipoDocumento;
import modelo.Domicilio;
import modelo.Barrio;
import modelo.Empleado;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import util.HibernateUtil;
import vista.rrhh.pantallaRegistrarEmpleado;
import controlador.utiles.gestorGeoLocalicacion;
import controlador.utiles.gestorBDvarios;
import util.Tupla;
import java.util.Date;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Proyecto2010_Requerimientos-iuga
//  @ File Name : GestorRegistrarNuevoEmpleado.java
//  @ Date : 10/06/2010
//  @ Author : 
//
//




public class GestorRegistrarNuevoEmpleado {

        private pantallaRegistrarEmpleado pantalla;
        private TipoDocumento TipoDocumentoEmpleado;
	private String nroDocumento;
        private String nombreEmpleado;
        private String apellidoEmpleado;
        private String emailEmpleado;
        private Date fechaNacimientoEmpleado;
	private Domicilio domicilioEmpleado;
	private Object listaPaises;
	private Object listaProvincias;
	private Object listaLocalidades;
	private Object listaBarrios;
	private Object listaTipoEspecialidad;
	private Object listaRangos;
	private Object especialidadesYRangos;
	private Object fechaActual;
	private Object legajoEmpleado;
        private String calle;
        private int nmro;
        private int piso;
        private String depto;
        private String cp;
        private Barrio barrio;

    public GestorRegistrarNuevoEmpleado(pantallaRegistrarEmpleado pantalla) {
        this.pantalla = pantalla;
    }
        

        public ArrayList<Tupla> mostrarTiposDeDocumento() {

           gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getTiposDeDocumento();

	}
	/*public ArrayList<String> mostrarTiposDeDocumento()
        {

            SessionFactory sf = HibernateUtil.getSessionFactory();
            Session sesion = sf.openSession();
            sesion.beginTransaction();
            List lista = sesion.createQuery("from TipoDocumento").list();
            sesion.getTransaction().commit();

            ArrayList<String> listaNombres = new ArrayList<String>();
            for (int i = 0; i < lista.size(); i++) {
                TipoDocumento td = (TipoDocumento)lista.get(i);
                listaNombres.add(td.getNombre());
            }

            return listaNombres;

	}*/
	
	public void verificarExistenciaEmpleado() {
	
	}
	
	public void datosPersonalesEmpleado(String nmroDoc, Tupla tipoDocumento, String nombre, String apellido, Date fechaNac, String email)
        {
            
            nroDocumento=nmroDoc;
            gestorBDvarios bdv = new gestorBDvarios();                        
            TipoDocumentoEmpleado=bdv.getTipoDeDocumento(tipoDocumento.getId());
            nombreEmpleado=nombre;
            apellidoEmpleado=apellido;
            emailEmpleado=email;
            fechaNacimientoEmpleado=fechaNac;
	
	}
	
	public void datosDomicilioEmpleado(String calle, String nro, String depto, String pisoD, String cp, Tupla tBarrio)
        {
            gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();                        
            barrio =ggl.getBarrio(tBarrio.getId());
            nmro=Integer.parseInt(nro);
            piso=Integer.parseInt(pisoD);
	
	}

        public ArrayList<Tupla> mostrarTiposDeTelefono() {

           gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getTiposDeTelefono();

	}
	public ArrayList<Tupla> mostrarPaises() {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getPaises();

	}
	
	public void paisEmpleado() {
	
	}
	
	public ArrayList<Tupla> mostrarProvincias(int idPais)
        {
           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getProvincias(idPais);
	}

        public ArrayList<Tupla> mostrarLocalidades(int idProvincia) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getLocalidades(idProvincia);

	}

	public ArrayList<Tupla> mostrarBarrios(int idLocalidad) {

           gestorGeoLocalicacion ggl = new gestorGeoLocalicacion();
           return ggl.getBarrios(idLocalidad);

	}
	
	public void provinciaEmpleado() {
	
	}		
	
	public void localidadEmpleado() {
	
	}
		
	public void barrioEmpleado() {
	
	}
	
	public ArrayList<Tupla> mostrarTipoEspecialidad() 
        {
            gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getTipoEspecialidades();
	
	}
	
	public ArrayList<Tupla> mostrarRangoEspecialidad()
        {
            gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getRangosEspecialidad();
	
	}
	
	public void tipoEspecialidadYRango() {
	
	}
	
        
	public void empleadoConfirmado() 
        {   
           /* gestorBDvarios bdv = new gestorBDvarios();
            Empleado emp=new Empleado()
            nroDocumento=nmroDoc;
                                    
            TipoDocumentoEmpleado=bdv.getTipoDeDocumento(tipoDocumento.getId());
            nombreEmpleado=nombre;
            apellidoEmpleado=apellido;
            emailEmpleado=email;
            fechaNacimientoEmpleado=fechaNac;
            
            */
	
	}
	
	public int generarLegajoEmpleado()
        {
             SessionFactory sf = HibernateUtil.getSessionFactory();
            Session sesion = sf.openSession();
            sesion.beginTransaction();
            int mayorLegajo;
            //try{

            Object ob =sesion.createQuery("Select MAX(legajo) from Empleado").uniqueResult();
            if(ob!=null)
            {mayorLegajo=(Integer)ob;}
            else{mayorLegajo=0;}
            sesion.getTransaction().commit();
            //}

            //catch(Exception e)
            //{
              //  mayorLegajo=0;
            //}

            return (mayorLegajo+1);
	
	}
	
	public void buscarUltimoLegajoEmpleado() {
	
	}
	
	public void crearEmpleado() {
	
	}
	
	public void finCU() {
	
	}
	
	public void telefonosEmpleado(ArrayList<String> numero,ArrayList<Tupla> tipo )
        {

	
	}
	
	public void seleccionTipoDocumento() {
	
	}
	
	public void documentoEmpleado() {
	
	}
		
}
