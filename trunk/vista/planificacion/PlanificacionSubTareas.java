/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * editarCotizacion_Descripcion.java
 *
 * Created on 06-jun-2011, 10:22:15
 */

package vista.planificacion;

import controlador.planificacion.GestorEditarTarea;
import controlador.planificacion.GestorPlanificacionSubTareas;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import util.*;
import vista.interfaces.ICallBackGen;

/**
 *
 * @author Administrador
 */
public class PlanificacionSubTareas extends javax.swing.JPanel implements ICallBackGen {

    private GestorPlanificacionSubTareas gestor;
    
    public static final String CALLBACK_NUEVASUBTAREA  = "NUEVASUBTAREA";
    
    /** Creates new form editarCotizacion_Descripcion */
    public PlanificacionSubTareas(GestorPlanificacionSubTareas gestor) {
        initComponents();
        this.gestor = gestor;
        
        gestor.setPantalla(this);
        gestor.cargarSubTareas();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSubTareas = new javax.swing.JTable();
        btnNuevaSubTarea = new javax.swing.JButton();
        btnEditarSubTarea = new javax.swing.JButton();
        btnEliminarSubTarea = new javax.swing.JButton();

        tablaSubTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sub Tarea", "Fecha Inicio", "Fecha Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaSubTareas);
        tablaSubTareas.getColumnModel().getColumn(0).setResizable(false);
        tablaSubTareas.getColumnModel().getColumn(0).setPreferredWidth(100);
        tablaSubTareas.getColumnModel().getColumn(1).setResizable(false);
        tablaSubTareas.getColumnModel().getColumn(2).setResizable(false);

        btnNuevaSubTarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/add.png"))); // NOI18N
        btnNuevaSubTarea.setText("Nueva Sub Tarea");
        btnNuevaSubTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaSubTareaActionPerformed(evt);
            }
        });

        btnEditarSubTarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/Modify.png"))); // NOI18N
        btnEditarSubTarea.setText("Editar");
        btnEditarSubTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarSubTareaActionPerformed(evt);
            }
        });

        btnEliminarSubTarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/Erase.png"))); // NOI18N
        btnEliminarSubTarea.setText("Eliminar");
        btnEliminarSubTarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSubTareaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNuevaSubTarea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarSubTarea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarSubTarea))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevaSubTarea)
                    .addComponent(btnEditarSubTarea)
                    .addComponent(btnEliminarSubTarea))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarSubTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarSubTareaActionPerformed
        GestorEditarTarea gestorEditarTarea = new GestorEditarTarea(this.gestor.getGestorPlanificacion());
        DefaultTableModel dtm = (DefaultTableModel) this.tablaSubTareas.getModel();
        Tupla t = (Tupla)dtm.getValueAt(tablaSubTareas.getSelectedRow(),0);
        gestorEditarTarea.seleccionarTarea(this.gestor.getSubTareaPlanificada(t.getId())); // Editando una tarea existente en memoria
        gestorEditarTarea.setGestorTareaPadre(this.gestor.getGestorPadre());
        PantallaEditarTarea editarTarea = new PantallaEditarTarea(gestorEditarTarea,this.gestor.getGestorPadre().getPantalla());
        SwingPanel.getInstance().addWindow(editarTarea);
        editarTarea.setVisible(true);
    }//GEN-LAST:event_btnEditarSubTareaActionPerformed

    private void btnNuevaSubTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaSubTareaActionPerformed
        GestorEditarTarea gestorEditarTarea = new GestorEditarTarea(this.gestor.getGestorPlanificacion());
        gestorEditarTarea.seleccionarTarea(0); // Una tarea nueva
        gestorEditarTarea.setGestorTareaPadre(this.gestor.getGestorPadre());
        PantallaEditarTarea editarTarea = new PantallaEditarTarea(gestorEditarTarea,this.gestor.getGestorPadre().getPantalla());
            // Seteo El Callback
            editarTarea.setCallback(this);
        SwingPanel.getInstance().addWindow(editarTarea);
        editarTarea.setVisible(true);
    }//GEN-LAST:event_btnNuevaSubTareaActionPerformed

    private void btnEliminarSubTareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSubTareaActionPerformed
       GestorEditarTarea gestorEditarTarea = new GestorEditarTarea(this.gestor.getGestorPlanificacion());
       gestorEditarTarea.setGestorTareaPadre(this.gestor.getGestorPadre());
       DefaultTableModel dtm = (DefaultTableModel) this.tablaSubTareas.getModel();
       Tupla t = (Tupla)dtm.getValueAt(tablaSubTareas.getSelectedRow(),0);
       gestorEditarTarea.seleccionarTarea(this.gestor.getSubTareaPlanificada(t.getId()));
       
       StringBuilder mensajeRetorno = new StringBuilder();
       if(gestorEditarTarea.eliminarComoSubTarea(mensajeRetorno))
       {
           JOptionPane.showMessageDialog(new JFrame(),mensajeRetorno,"Exito!",JOptionPane.INFORMATION_MESSAGE);
       }
       else
       {
           JOptionPane.showMessageDialog(new JFrame(),mensajeRetorno,"Error!",JOptionPane.INFORMATION_MESSAGE);
       }
       // Refrescar Tabla
       cargarSubTareas();
    }//GEN-LAST:event_btnEliminarSubTareaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditarSubTarea;
    private javax.swing.JButton btnEliminarSubTarea;
    private javax.swing.JButton btnNuevaSubTarea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaSubTareas;
    // End of variables declaration//GEN-END:variables

    public void cargarSubTareas() {
        DefaultTableModel dtm = (DefaultTableModel) tablaSubTareas.getModel();
        TablaUtil.vaciarDefaultTableModel(dtm);
        Iterator<NTupla> itSubTareas = gestor.getSubTareas().iterator();
        while(itSubTareas.hasNext())
        {
            NTupla nt = itSubTareas.next();
            Date[] fechas = (Date[])nt.getData();
            Tupla t = new Tupla();
            t.setNombre(nt.getNombre());
            t.setId(nt.getId());
            String fechaInicio = "";
            if(fechas[0] != null)
                fechaInicio = FechaUtil.getFecha(fechas[0]);
            String fechaFin = "";
            if(fechas[1] != null)
                fechaFin = FechaUtil.getFecha(fechas[1]);
            Object[] fila = { t,fechaInicio,fechaFin};
            dtm.addRow(fila);
        }
    }

    public void actualizarSubTareas() {
        this.cargarSubTareas();
    }

    @Override
    public void actualizar(int id, String flag, Class tipo) {
        
        if(flag.equals(PlanificacionSubTareas.CALLBACK_NUEVASUBTAREA))
        {
            // Termin√≥ de agregar una nueva SubTarea por lo tanto actualizo la tabla
            actualizarSubTareas();
        }
            
        
    }
    
    
}
