/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pantallaConsultar.java
 *
 * Created on 06-ago-2010, 15:44:11
 */

package vista;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.hibernate.Session;
import util.HibernateUtil;
import util.TablaUtil;

/**
 *
 * @author Administrador
 */
public abstract class PantallaConsultarGenerica extends javax.swing.JInternalFrame {

    private Class entidad;
    private HashMap<String,String> columnas;
    
    /** Creates new form pantallaConsultar */
    public PantallaConsultarGenerica(Class entidad) {
        
        this.entidad = entidad;
        
        initComponents();
        initConfig();
        habilitarVentana();

    }

    private void habilitarVentana()
    {
        cargarDatosIniciales();        
    }

    private void cargarDatosIniciales()
    {
        // Limpio el modelo Anterior
        ArrayList<ArrayList<String>> data = new ArrayList<ArrayList<String>>();
        
        // Cargo los datos iniciales de la tabla
        try{
            Session sesion= HibernateUtil.getSession();
            sesion.beginTransaction();
                List lista = sesion.createQuery("FROM "+this.entidad.getSimpleName()).list();
                for (int i = 0; i < lista.size(); i++) 
                {
                    Object obj = lista.get(i);
                    // Reflexiono un poco
                    Iterator it = getColumnas().entrySet().iterator();
                    
                    ArrayList<String> fila = new ArrayList<String>();
                    
                    while (it.hasNext()) {
                        Map.Entry e = (Map.Entry)it.next();
                        System.out.println(e.getKey() + " " + e.getValue());
                        
                            java.lang.reflect.Method method; 
                            try 
                            { 
                                method = obj.getClass().getMethod((String)e.getKey());
                                try { 
                                    String result = (String) String.valueOf(method.invoke(obj));
                                    System.out.println("Resultado Reflection: "+result);
                                    
                                    fila.add(result);
                                    
                                }  catch (Exception ex) 
                                {
                                    System.out.println("No se pudo ejecutar el m√©todo");
                                } 
                                
                            } 
                            catch (Exception ep) { 
                                System.out.println("No se encontro el metodo");
                            }
                    }
                    data.add(fila);

                }
            sesion.getTransaction().commit();
        } catch (Exception ex)
        {
            System.out.println("No se pudo abrir la sesion");
        }
        
        // Armo el modelo
        DefaultTableModel modelo = new DefaultTableModel(parseData(data), parseColumNames());
        tblLista.setModel(modelo);
        
        // Muestro la cantidad de Ocurrencias
        mostrarCantidadFilas();
        
    }

    private void setCantidadResultados(int cant)
    {
        lblCantResultados.setText("Cantidad de Resultados: "+cant);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBuscar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLista = new javax.swing.JTable();
        btnCerrar = new javax.swing.JButton();
        lblCantResultados = new javax.swing.JLabel();
        btnRefrescar = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consultar ...");

        txtBuscar.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txtBuscar.setForeground(new java.awt.Color(102, 102, 102));
        txtBuscar.setText("Buscar...");
        txtBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBuscarMouseClicked(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarKeyPressed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/search.png"))); // NOI18N

        tblLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Legajo", "Nombre", "Apellido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLista);

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/delete.png"))); // NOI18N
        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        lblCantResultados.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblCantResultados.setText("Cantidad: ");

        btnRefrescar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/iconos/var/16x16/refresh.png"))); // NOI18N
        btnRefrescar.setToolTipText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRefrescar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblCantResultados, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addGap(351, 351, 351)
                        .addComponent(btnCerrar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(btnRefrescar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCerrar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCantResultados, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBuscarMouseClicked

        if(txtBuscar.getText().equals("Buscar..."))
        {
            txtBuscar.setText("");
        }

    }//GEN-LAST:event_txtBuscarMouseClicked

    private void txtBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyPressed
        activarFiltrosTabla();
//        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
//        {
//            // LANZO EL BUSCAR
//            activarFiltrosTabla();
//        }
    }//GEN-LAST:event_txtBuscarKeyPressed

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
        cargarDatosIniciales();
    }//GEN-LAST:event_btnRefrescarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    protected HashMap<String,String> getColumnas()
    {
        return new HashMap<String,String>();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantResultados;
    private javax.swing.JTable tblLista;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    private void initConfig() {
        setNombreVentana();
    }
    
    protected void setNombreVentana()
    {
        // Seteo el nombre de la ventana
        String nombre = this.entidad.getSimpleName();
        // WORKARROUND para este asco nombre
        if(nombre.equals("PlanificacionXXX"))
        {
            nombre = "Planificaci√≥n";
        }
        this.setTitle("Listado: "+nombre);        
    }
    
    protected Object[] parseColumNames()
    {
        ArrayList<String> lista = new ArrayList<String>();
        Iterator it = getColumnas().entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry e = (Map.Entry)it.next();
            System.out.println("[DEBUG] Agrego a la columnas: " + e.getValue());
            lista.add((String)e.getValue());
        }
        
        Object[] columns = new Object[lista.size()];
        for (int i = 0; i < lista.size(); i++) 
        {
            String s = lista.get(i);
            columns[i] = s;
        }
        
        return columns;
    }

    private Object[][] parseData(ArrayList<ArrayList<String>> data) {
        
        
        
        int a = 0;
        
        if(data!=null)
            a = data.size();
        
        int b = 0;
        
        if(data.size()>0 && data.get(0)!=null)
            b=data.get(0).size();
        
        System.out.println("[DEBUG] Cantidad de Filas: "+a);    
        System.out.println("[DEBUG] Cantidad de Columbas: "+b);
        
        Object[][] fila = new Object[a][b];
        
        for (int i = 0; i < data.size(); i++) {
            ArrayList<String> arrayList = data.get(i);
            for (int j = 0; j < arrayList.size(); j++) {
                String d = arrayList.get(j);
                fila[i][j] = d;
            }
        }
       
        return fila;
    }

    private void mostrarCantidadFilas() {
        lblCantResultados.setText("Cantidad: "+tblLista.getRowCount());
    }

    protected void activarFiltrosTabla()
    {
           TableRowSorter<TableModel> modeloOrdenado;

           modeloOrdenado = new TableRowSorter<TableModel>(tblLista.getModel());
           tblLista.setRowSorter(modeloOrdenado);
        
           String[] cadena=txtBuscar.getText().split(" ");
           List<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>();
           for (int i= 0; i < cadena.length; i++)
           {
             filters.add(RowFilter.regexFilter("(?i)" + cadena[i]));
           }
            
           RowFilter<Object,Object> cadenaFilter = RowFilter.andFilter(filters);           
           modeloOrdenado.setRowFilter(cadenaFilter);
           
           mostrarCantidadFilas();
    }
    
}
