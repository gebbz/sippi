package controlador.comer;

//

import java.util.ArrayList;
import java.util.List;
import modelo.TipoTelefono;
import modelo.Telefono;
import modelo.ContactoResponsable;

import modelo.EmpresaCliente;
import modelo.Planta;
import modelo.ContactoResponsable;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import util.HibernateUtil;
import vista.comer.pantallaRegistrarContactoResponsable;
//import controlador.utiles.gestorGeoLocalicacion;
import controlador.utiles.gestorBDvarios;
import util.Tupla;
import java.util.Date;
import java.util.Iterator;
//import java.util.Set;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Proyecto2010_Requerimientos-iuga
//  @ File Name : GestorModificarNuevoEmpleado.java
//  @ Date : 10/08/2010
//  @ Author : Fran
//
//




public class GestorModificarContactoResponsable   implements IGestorContactoResponsable {

        private pantallaRegistrarContactoResponsable pantalla;

        private String nombreContactoResponsable;
        private String apellidoContactoResponsable;
        private String emailContactoResponsable;
        private String cuilContactoResponsable;
        private String cargoContactoResponsable;
        private ArrayList<String> listaNroTel;
        private ArrayList<TipoTelefono> listaTipoTel;
	//private Object listaRangos;
	private Date fechaActual;
        private EmpresaCliente empresaCliente;
        private Planta planta;
	
        private ContactoResponsable contactoModif;
        private String cuilContactoOriginal;
        private int idContactoOriginal;


    public GestorModificarContactoResponsable(pantallaRegistrarContactoResponsable pantalla, int id)
    {
        this.pantalla = pantalla;
        
        listaNroTel= new  ArrayList<String>();
        listaTipoTel= new ArrayList<TipoTelefono>();
        idContactoOriginal=id;
        

    }


        
        public boolean ValidarCuil(String cuil)
        {
            SessionFactory sf = HibernateUtil.getSessionFactory();
            Session sesion = sf.openSession();
            List listCuil=new ArrayList();
            boolean aprobado=true;
            listCuil =sesion.createQuery("Select cuil from modelo.ContactoResponsable").list();//
            String n;
            for(int i=0; i<listCuil.size();i++)
            {
                n=(String)listCuil.get(i);
                if(n.equals(cuil))
                {
                    aprobado=false;
                    if(cuilContactoOriginal.equals(cuil))
                    {aprobado=true;
                     break;}
                }
            }
            return aprobado;
        }
	

        public ArrayList<Tupla> mostrarTiposDeTelefono() {

           gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getTiposDeTelefono();

	}
	public ArrayList<Tupla> mostrarPlantas(int idEmpresa)
        {
           gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getPlantas(idEmpresa);
	}
	public ArrayList<Tupla> mostrarEmpresas() {

           gestorBDvarios bdv = new gestorBDvarios();
           return bdv.getEmpresas();

	}
        public boolean levantarContacto(int id)
        {
            Session sesion;
            ///////////////////////////////////
             try {
                    sesion = HibernateUtil.getSession();
            //sesion.beginTransaction();
            contactoModif = (ContactoResponsable) sesion.createQuery("from ContactoResponsable where id ="+id).uniqueResult();
              } catch (Exception ex)
            {
                System.out.println("Error levantando el empleado");
                return false;
            }
            //legajoEmpleadoOriginal=empleadoModif.getLegajo();
            //nroDocumentoOriginal=empleadoModif.getNroDoc();
//            cuilContactoOriginal=contactoModif.getCuil();
            //Envio a la pantalla los datos personales del empleado levantado
            /*Tupla emp=new Tupla();
            Tupla plant=new Planta;
            emp.setId()*/
//            pantalla.datosPersonalesContacto(contactoModif.getCuil(),contactoModif.getNombre(), contactoModif.getApellido(),  contactoModif.getEmail(),contactoModif.getCargo());
            //Envio a la pantalla los telefonos del empleado levantado
//            Telefono[] tel=(Telefono[])contactoModif.getTelefonos().toArray(new Telefono[0]);
            ArrayList listaNro=new ArrayList<String>();
            ArrayList listaTipoT=new ArrayList<Tupla>();
//            for(int i=0; i<tel.length;i++)
//            {
//               TipoTelefono td= tel[i].getTipo();
//               Tupla tup=new Tupla();
//               tup.setId(td.getId());
//               tup.setNombre(td.getNombre());
//               listaTipoT.add(tup);
//               listaNro.add(tel[i].getNumero());
//            }
            pantalla.telefonosContacto( listaNro , listaTipoT);
            ////
            return true;
           /* } catch (Exception ex)
            {
                System.out.println("Error levantando el empleado");
                return false;
            }*/
        }
        
        
        
        public void datosPersonalesContactoResponsable(String cuil, String nombre, String apellido, String email, String cargo)
        {

            //gestorBDvarios bdv = new gestorBDvarios();
            //tipoDocumentoCapacitador=bdv.getTipoDeDocumento(tipoDocumento.getId());
            nombreContactoResponsable=nombre;
            apellidoContactoResponsable=apellido;
            emailContactoResponsable=email;
            cuilContactoResponsable=cuil;
            cargoContactoResponsable=cargo;

	}
	public void datosPersonalesContactoResponsable(String cuil, String nombre, String apellido, String email, String cargo, Tupla empr, Tupla plant )
        {

            gestorBDvarios bdv = new gestorBDvarios();
            //tipoDocumentoCapacitador=bdv.getTipoDeDocumento(tipoDocumento.getId());
            nombreContactoResponsable=nombre;
            apellidoContactoResponsable=apellido;
            emailContactoResponsable=email;
            cuilContactoResponsable=cuil;
            cargoContactoResponsable=cargo;
            empresaCliente=bdv.getEmpresa(empr.getId());
            List plnts=  empresaCliente.getPlantas();
            boolean todoOK=false;
            for(int i=0; i<plnts.size(); i++)
            {
                Planta p=(Planta)plnts.get(i);
                if(p.esPlanta(plant.getId()))
                {planta=p;
                todoOK=true;}
            }
            if(!todoOK)
            {System.out.println("/n ERROR IMPOSIBLE: PLANTA INEXISTENTE SELECCIONADA POR EL USUARIO /n");}
	}

	public boolean validarPlantaSinContacto()
        {
            if(planta==null)
            {return true;}
            else
            {
                if(planta.getContacto()==null)
                {return true;}
                else
                {return false;}
            }
        }

	public boolean contactoModificado()
        {
            //ContactoResponsable contacto;
           
            Session sesion;
            try {
                    sesion = HibernateUtil.getSession();
                     //SessionFactory sf = HibernateUtil.getSessionFactory();


                    //sesion = sf.openSession();
                   } catch (Exception ex)////////////
            {//////////////////////////////////////////
                System.out.println("No se pudo abrir la sesion");//////////
                return false;//////////////
            }//////////////////////////////////////////////////

            try{
                    HibernateUtil.beginTransaction();
                    //sesion.beginTransaction();
//                     Iterator ittv=contactoModif.getTelefonos().iterator();
//                    while(ittv.hasNext())
//                    {
//                        Telefono tel=(Telefono)ittv.next();
//                        sesion.delete(tel);
//                    }
                     try{
            //contacto=modificarContacto();
                    modificarContacto();
                    if(planta!=null)
                    {
                       planta.setContacto(contactoModif);

                     }

                    }
                   catch (Exception ex)
                    {
                       System.out.println("No se pudo crear el contacto responsable");
                        return false;
                    }
                   // sesion.delete(contactoModif);
//                    Iterator itt=contactoModif.getTelefonos().iterator();
//                    while(itt.hasNext())
//                    {
//                        Telefono tel=(Telefono)itt.next();
//                        sesion.save(tel);
//                    }

                    sesion.saveOrUpdate(contactoModif);
                    if(planta!=null)
                    {sesion.saveOrUpdate(planta);}
                    //sesion.getTransaction().commit();
                    HibernateUtil.commitTransaction();

                    return true;
                    }catch(Exception e) {
                        System.out.println("No se pudo realizar la transaccion\n"+e.getMessage());
                        HibernateUtil.rollbackTransaction();

                        return false;
                }
	}

	

	public void buscarUltimoLegajoEmpleado() {

	}
        public void vaciarDatos()
        {
        
        nombreContactoResponsable=null;
        apellidoContactoResponsable=null;
        emailContactoResponsable=null;
        cuilContactoResponsable=null;
        cargoContactoResponsable=null;
        listaNroTel= new  ArrayList<String>();
        listaTipoTel= new ArrayList<TipoTelefono>();
	empresaCliente=null;
        planta=null;
        
        }
	public void modificarContacto()
        {

            //Date fechaAltaActual=new Date();
           // fecha_Alta=System
           
           contactoModif.setNombre(nombreContactoResponsable);
//           contactoModif.setApellido(apellidoContactoResponsable);
//           contactoModif.setCuil(cuilContactoResponsable);
//           contactoModif.setEmail(emailContactoResponsable);
//           contactoModif.setTelefonos(listaNroTel, listaTipoTel);
//           contactoModif.setCargo(cargoContactoResponsable);
            
           // ContactoResponsable contR=new ContactoResponsable(nombreContactoResponsable, apellidoContactoResponsable, cuilContactoResponsable,  emailContactoResponsable,  listaNroTel, listaTipoTel,  contactoModif.getFechaAlta());
            //Empleado emp=new Empleado(legajoEmpleado,nombreEmpleado, apellidoEmpleado,fechaNacimientoEmpleado, tipoDocumentoEmpleado ,nroDocumento, cuilEmpleado,  emailEmpleado,  calleD,  nmroD,  pisoD,  departamentoD,  codigoPostalD,  barrioD , listaTipoEspecialidades, listaRangoEspecialidades ,HlistaNroTel, HlistaTipoTel, fechaAltaActual);
            
            //return contR;

	}
        public void telefonosContactoResponsable(ArrayList<String> numero,ArrayList<Tupla> tipo )
        {


            listaNroTel=numero;
            listaTipoTel=new ArrayList();
            gestorBDvarios bdv = new gestorBDvarios();
            for(int i=0; i<tipo.size();i++)
            {
               TipoTelefono td= bdv.getTipoDeTelefono(tipo.get(i).getId());
               listaTipoTel.add(td);
            }
	}
	public void finCU() {

	}

	

	public void seleccionTipoDocumento() {

	}

	public void documentoEmpleado() {

	}

}
